datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

// Tabel User - contoh: admin, guru, siswa
model User {
    id        String   @id @default(uuid()) @map("id")
    name      String
    email     String
    password  String
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")
    roleId    String?

    role Role? @relation(fields: [roleId], references: [id])

    @@map("users")
}

// Tabel Role - contoh: admin, guru, siswa
model Role {
    id        String   @id @default(uuid()) @map("id")
    name      String   @unique
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    users User[]

    @@map("roles")
}

// Tabel Siswa
model Student {
    id       String @id @default(uuid()) @map("id")
    name     String
    identity String @unique @map("identity")
    password String

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    answers Answer[]

    @@map("students")
}

// Tabel Vokasi - contoh: ipa, ips, bahasa
model Vocation {
    id        String   @id @default(uuid()) @map("id")
    key       String   @unique @map("key")
    name      String
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    subjects Subject[] @relation("vocation_subjects")
    answers  Answer[]

    @@map("vocations")
}

// Tabel Mata Pelajaran - contoh: matematika, fisika, kimia
model Subject {
    id        String   @id @default(uuid()) @map("id")
    name      String   @unique
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    vocations Vocation[] @relation("vocation_subjects")
    scores    Score[]

    @@map("subjects")
}

// Tabel Jawaban Siswa
model Answer {
    id         String @id @default(uuid()) @map("id")
    studentId  String @map("student_id")
    vocationId String @map("vocation_id")

    mainAnswer     String @map("main_answer")
    mainReason     String @map("main_reason")
    subAnswer      String @map("sub_answer")
    subReason      String @map("sub_reason")
    mbtiTestResult String @map("mbti_test_result")

    // AI Result & Recommendation
    aiResult         String? @map("ai_result")
    aiRecommendation String? @map("ai_recommendation")
    isMatch          Boolean @default(false) @map("is_match")
    trainLabel       String? @map("train_label")
    trainPercentage  Json?   @map("train_percentage")

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    scores   Score[]
    vocation Vocation @relation(fields: [vocationId], references: [id])
    student  Student  @relation(fields: [studentId], references: [id])

    @@map("answers")
}

// Tabel Skor - menghubungkan mata pelajaran dengan jawaban siswa
model Score {
    id        String @id @default(uuid()) @map("id")
    value     Int
    subjectId String @map("subject_id")
    answerId  String @map("answer_id")

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    subject Subject @relation(fields: [subjectId], references: [id])
    answer  Answer  @relation(fields: [answerId], references: [id])

    @@unique([subjectId, answerId], name: "unique_subject_answer")
    @@map("scores")
}
