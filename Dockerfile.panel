FROM node:20-alpine AS builder
RUN apk add --no-cache libc6-compat 
RUN apk update
# Set working directory
WORKDIR /app

RUN npm i -g turbo
COPY . .

RUN turbo prune --scope=panel --docker

RUN cp .env out/full/apps/panel/.env

# Add lockfile and package.json's of isolated subworkspace
FROM node:20-alpine AS installer
RUN apk add --no-cache libc6-compat python3 make g++
RUN apk update
RUN npm i -g pnpm
RUN npm i -g turbo

WORKDIR /app
# First install the dependencies (as they change less often)
COPY .gitignore .gitignore
COPY --from=builder /app/out/json/ .
COPY --from=builder /app/out/pnpm-lock.yaml ./pnpm-lock.yaml
# Print all directory
RUN ls -al /app
RUN pnpm i

# Build the project
COPY --from=builder /app/out/full/ .
COPY turbo.json turbo.json

RUN turbo db:generate

RUN turbo run build --filter=panel
RUN ls -al /app

FROM node:20-alpine AS runner
WORKDIR /app

# Don't run production as root
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs
USER nextjs

COPY --from=installer /app/apps/panel/next.config.mjs .
COPY --from=installer /app/apps/panel/package.json .

# Automatically leverage output traces to reduce image size
# https://nextjs.org/docs/advanced-features/output-file-tracing
COPY --from=installer --chown=nextjs:nodejs /app/apps/panel/.next/standalone ./
COPY --from=installer --chown=nextjs:nodejs /app/apps/panel/public /app/apps/panel/public
COPY --from=installer --chown=nextjs:nodejs /app/apps/panel/.next/static ./apps/panel/.next/static

EXPOSE 3000

CMD node apps/panel/server.js
